import requests
import json
import os
from datetime import datetime

class CloudflareWorkerManager:
    def __init__(self):
        self.config = self.load_config()
        self.base_url = "https://api.cloudflare.com/client/v4"
        
    def load_config(self):
        """Load configuration from config.json"""
        try:
            with open('config.json', 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return {
                "cloudflare": {
                    "api_token": "",
                    "account_id": "",
                    "zone_id": "",
                    "worker_name": "article-generator"
                },
                "gemini": {
                    "api_keys": []
                }
            }
    
    def get_headers(self):
        """Get headers for Cloudflare API requests"""
        return {
            "Authorization": f"Bearer {self.config['cloudflare']['api_token']}",
            "Content-Type": "application/json"
        }
    
    def generate_worker_code(self):
        """Generate the Cloudflare Worker JavaScript code"""
        worker_code = f"""
// Cloudflare Worker untuk Auto Generate Artikel
// Generated by Streamlit App pada {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

const GEMINI_API_KEYS = {json.dumps(self.config['gemini']['api_keys'])};
const DOMAIN = "https://your-domain.com";

// Website Templates
const DEFAULT_LAYOUT = `{self.get_default_layout()}`;
const POST_LAYOUT = `{self.get_post_layout()}`;

// Static Pages
const STATIC_PAGES = {{
    'about': `{self.get_page_content('about')}`,
    'contact': `{self.get_page_content('contact')}`,
    'privacy-policy': `{self.get_page_content('privacy-policy')}`,
    'disclaimer': `{self.get_page_content('disclaimer')}`
}};

// CSS Styles
const CSS_STYLES = `{self.get_css_content()}`;

// Article subjects
const SUBJECTS = [
    "Investasi Saham untuk Pemula",
    "Forex Trading Strategy",
    "Cryptocurrency Investment Guide",
    "Reksadana vs Saham",
    "Analisis Fundamental Saham",
    "Trading Bitcoin untuk Pemula",
    "Investasi Emas vs Properti",
    "Cara Membaca Grafik Saham",
    "Diversifikasi Portfolio Investasi",
    "Strategi Dollar Cost Averaging"
];

let currentKeyIndex = 0;

// Fungsi untuk generate artikel
async function generateArticle(subject) {{
    const apiKey = GEMINI_API_KEYS[currentKeyIndex];
    currentKeyIndex = (currentKeyIndex + 1) % GEMINI_API_KEYS.length;
    
    const prompt = `Generate a comprehensive SEO-optimized article about "${{subject}}" in Indonesian language. 
    
    Structure:
    1. Create engaging title
    2. Write comprehensive content with proper headings
    3. Include relevant keywords naturally
    4. Add internal and external links
    5. Generate meta description
    6. Create appropriate tags
    
    Format as JSON with fields: title, content, meta_description, tags, permalink`;
    
    try {{
        const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=' + apiKey, {{
            method: 'POST',
            headers: {{
                'Content-Type': 'application/json',
            }},
            body: JSON.stringify({{
                contents: [{{
                    parts: [{{
                        text: prompt
                    }}]
                }}]
            }})
        }});
        
        const data = await response.json();
        const generatedText = data.candidates[0].content.parts[0].text;
        
        // Parse JSON from response
        const jsonMatch = generatedText.match(/```json([\\s\\S]*?)```/);
        if (jsonMatch) {{
            return JSON.parse(jsonMatch[1]);
        }}
        
        // Fallback parsing
        return JSON.parse(generatedText);
    }} catch (error) {{
        console.error('Error generating article:', error);
        return null;
    }}
}}

// Fungsi untuk create post file
function createPostFile(article) {{
    const now = new Date();
    const dateStr = now.toISOString().split('T')[0];
    const slug = article.permalink || article.title.toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/^-+|-+$/g, '');
    
    const frontmatter = `---
layout: post
title: "${{article.title}}"
date: ${{now.toISOString()}}
categories: [Investment, Finance]
tags: ${{JSON.stringify(article.tags || [])}}
permalink: /${{slug}}/
description: "${{article.meta_description}}"
---

${{article.content}}`;
    
    return {{
        filename: `${{dateStr}}-${{slug}}.md`,
        content: frontmatter
    }};
}}

// Main handler
export default {{
    async fetch(request, env, ctx) {{
        const url = new URL(request.url);
        const path = url.pathname;
        
        // Handle static pages
        if (STATIC_PAGES[path.substring(1)]) {{
            return new Response(renderPage(STATIC_PAGES[path.substring(1)], path.substring(1)), {{
                headers: {{ 'Content-Type': 'text/html' }}
            }});
        }}
        
        // Handle CSS
        if (path === '/style.css') {{
            return new Response(CSS_STYLES, {{
                headers: {{ 'Content-Type': 'text/css' }}
            }});
        }}
        
        // Handle auto generate endpoint
        if (path === '/auto-generate' && request.method === 'POST') {{
            const subject = SUBJECTS[Math.floor(Math.random() * SUBJECTS.length)];
            const article = await generateArticle(subject);
            
            if (article) {{
                const postFile = createPostFile(article);
                
                // Store in KV storage (if available)
                if (env.ARTICLES_KV) {{
                    await env.ARTICLES_KV.put(postFile.filename, postFile.content);
                }}
                
                return new Response(JSON.stringify({{
                    success: true,
                    article: article,
                    filename: postFile.filename
                }}), {{
                    headers: {{ 'Content-Type': 'application/json' }}
                }});
            }}
            
            return new Response(JSON.stringify({{ success: false, error: 'Failed to generate article' }}), {{
                status: 500,
                headers: {{ 'Content-Type': 'application/json' }}
            }});
        }}
        
        // Handle article pages
        if (path.startsWith('/') && path.length > 1) {{
            // Load article from KV storage
            if (env.ARTICLES_KV) {{
                const articles = await env.ARTICLES_KV.list();
                const slug = path.substring(1);
                
                for (const key of articles.keys) {{
                    if (key.name.includes(slug)) {{
                        const content = await env.ARTICLES_KV.get(key.name);
                        return new Response(renderArticle(content), {{
                            headers: {{ 'Content-Type': 'text/html' }}
                        }});
                    }}
                }}
            }}
        }}
        
        // Handle home page
        if (path === '/' || path === '/index.html') {{
            return new Response(renderHomepage(), {{
                headers: {{ 'Content-Type': 'text/html' }}
            }});
        }}
        
        // Handle sitemap
        if (path === '/sitemap.xml') {{
            return new Response(generateSitemap(), {{
                headers: {{ 'Content-Type': 'application/xml' }}
            }});
        }}
        
        // Handle RSS feed
        if (path === '/feed.xml') {{
            return new Response(generateRSSFeed(), {{
                headers: {{ 'Content-Type': 'application/xml' }}
            }});
        }}
        
        return new Response('Not Found', {{ status: 404 }});
    }}
}};

// Render functions
function renderPage(content, title) {{
    return DEFAULT_LAYOUT
        .replace('{{{{ content }}}}', content)
        .replace('{{{{ page.title }}}}', title.charAt(0).toUpperCase() + title.slice(1))
        .replace('{{{{ site.title }}}}', 'Investment Blog');
}}

function renderArticle(markdownContent) {{
    // Parse frontmatter and markdown
    const parts = markdownContent.split('---');
    const frontmatter = parts[1];
    const content = parts[2];
    
    // Simple markdown to HTML conversion
    const htmlContent = content
        .replace(/^# (.+)$/gm, '<h1>$1</h1>')
        .replace(/^## (.+)$/gm, '<h2>$1</h2>')
        .replace(/^### (.+)$/gm, '<h3>$1</h3>')
        .replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>')
        .replace(/\\*(.+?)\\*/g, '<em>$1</em>')
        .replace(/\\n/g, '<br>');
    
    return POST_LAYOUT
        .replace('{{{{ content }}}}', htmlContent)
        .replace('{{{{ page.title }}}}', 'Article Title')
        .replace('{{{{ site.title }}}}', 'Investment Blog');
}}

function renderHomepage() {{
    const homeContent = `
    <h1>Welcome to Investment Blog</h1>
    <p>Your trusted source for investment and financial advice.</p>
    <div class="recent-posts">
        <h2>Recent Posts</h2>
        <p>Loading recent articles...</p>
    </div>
    `;
    
    return DEFAULT_LAYOUT
        .replace('{{{{ content }}}}', homeContent)
        .replace('{{{{ page.title }}}}', 'Home')
        .replace('{{{{ site.title }}}}', 'Investment Blog');
}}

function generateSitemap() {{
    const baseUrl = DOMAIN;
    const now = new Date().toISOString();
    
    return `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
    <url>
        <loc>${{baseUrl}}/</loc>
        <lastmod>${{now}}</lastmod>
        <changefreq>daily</changefreq>
        <priority>1.0</priority>
    </url>
    <url>
        <loc>${{baseUrl}}/about</loc>
        <lastmod>${{now}}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.8</priority>
    </url>
    <url>
        <loc>${{baseUrl}}/contact</loc>
        <lastmod>${{now}}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.8</priority>
    </url>
    <url>
        <loc>${{baseUrl}}/privacy-policy</loc>
        <lastmod>${{now}}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.5</priority>
    </url>
    <url>
        <loc>${{baseUrl}}/disclaimer</loc>
        <lastmod>${{now}}</lastmod>
        <changefreq>monthly</changefreq>
        <priority>0.5</priority>
    </url>
</urlset>`;
}}

function generateRSSFeed() {{
    const baseUrl = DOMAIN;
    const now = new Date().toISOString();
    
    return `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>Investment Blog</title>
        <link>${{baseUrl}}</link>
        <description>Your trusted source for investment and financial advice</description>
        <language>id</language>
        <pubDate>${{now}}</pubDate>
        <lastBuildDate>${{now}}</lastBuildDate>
    </channel>
</rss>`;
}}
"""
        return worker_code
    
    def get_default_layout(self):
        """Get default layout template"""
        try:
            with open('_layouts/default.html', 'r') as f:
                return f.read().replace('`', '\\`').replace('${', '\\${')
        except FileNotFoundError:
            return """<!DOCTYPE html>
<html>
<head>
    <title>{{ page.title }} - {{ site.title }}</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/style.css">
</head>
<body>
    <header>
        <h1><a href="/">{{ site.title }}</a></h1>
    </header>
    <main>
        {{ content }}
    </main>
    <footer>
        <p>&copy; 2025 {{ site.title }}</p>
    </footer>
</body>
</html>"""
    
    def get_post_layout(self):
        """Get post layout template"""
        try:
            with open('_layouts/post.html', 'r') as f:
                return f.read().replace('`', '\\`').replace('${', '\\${')
        except FileNotFoundError:
            return """<article>
    <h1>{{ page.title }}</h1>
    <div class="post-meta">
        <time>{{ page.date }}</time>
    </div>
    <div class="post-content">
        {{ content }}
    </div>
</article>"""
    
    def get_page_content(self, page_name):
        """Get static page content"""
        try:
            with open(f'_pages/{page_name}.html', 'r') as f:
                return f.read().replace('`', '\\`').replace('${', '\\${')
        except FileNotFoundError:
            return f"<h1>{page_name.title()}</h1><p>Content for {page_name} page.</p>"
    
    def get_css_content(self):
        """Get CSS styles"""
        try:
            with open('assets/style.css', 'r') as f:
                return f.read().replace('`', '\\`').replace('${', '\\${')
        except FileNotFoundError:
            return """
body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
}

header {
    text-align: center;
    margin-bottom: 30px;
}

header h1 a {
    text-decoration: none;
    color: #333;
}

main {
    min-height: 60vh;
}

footer {
    text-align: center;
    margin-top: 50px;
    padding-top: 20px;
    border-top: 1px solid #eee;
}

.post-meta {
    color: #666;
    font-size: 0.9em;
    margin-bottom: 20px;
}

.post-content {
    line-height: 1.8;
}

.post-content h2 {
    margin-top: 30px;
    color: #333;
}
"""
    
    def deploy_worker(self):
        """Deploy worker to Cloudflare"""
        if not self.config['cloudflare']['api_token']:
            return {"success": False, "error": "API Token tidak ditemukan"}
        
        account_id = self.config['cloudflare']['account_id']
        worker_name = self.config['cloudflare']['worker_name']
        
        # Generate worker code
        worker_code = self.generate_worker_code()
        
        # Deploy to Cloudflare
        url = f"{self.base_url}/accounts/{account_id}/workers/scripts/{worker_name}"
        
        headers = self.get_headers()
        headers['Content-Type'] = 'application/javascript'
        
        try:
            response = requests.put(url, headers=headers, data=worker_code)
            
            if response.status_code == 200:
                # Set route if zone_id is provided
                if self.config['cloudflare']['zone_id']:
                    self.set_worker_route(worker_name)
                
                return {
                    "success": True,
                    "url": f"https://{worker_name}.{account_id}.workers.dev",
                    "response": response.json()
                }
            else:
                return {
                    "success": False,
                    "error": f"Deployment failed: {response.text}"
                }
        except Exception as e:
            return {
                "success": False,
                "error": f"Error: {str(e)}"
            }
    
    def set_worker_route(self, worker_name):
        """Set worker route to custom domain"""
        zone_id = self.config['cloudflare']['zone_id']
        
        url = f"{self.base_url}/zones/{zone_id}/workers/routes"
        
        data = {
            "pattern": "*example.com/*",
            "script": worker_name
        }
        
        try:
            response = requests.post(url, headers=self.get_headers(), json=data)
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def get_worker_status(self):
        """Get worker deployment status"""
        account_id = self.config['cloudflare']['account_id']
        worker_name = self.config['cloudflare']['worker_name']
        
        url = f"{self.base_url}/accounts/{account_id}/workers/scripts/{worker_name}"
        
        try:
            response = requests.get(url, headers=self.get_headers())
            return response.json()
        except Exception as e:
            return {"error": str(e)}